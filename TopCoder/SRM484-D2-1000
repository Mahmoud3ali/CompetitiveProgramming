#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class CubeColoring {
public:
	long long theCount(vector <string> colors)
	{
	    bool v[10][40] = {} ;
	    long long ans = 0 ;
		for(int a = 0 ; a < colors[0].size() ; a++)
        {
            if(colors[0][a] == 'N') continue;
            v[0][a] = 1;
            for(int b = 0 ; b < colors[2].size() ; b++)
            {
                if(colors[2][b] == 'N') continue;
                v[2][b] = 1;
                for(int c = 0 ; c < colors[5].size() ; c++)
                {
                    if(colors[5][c] == 'N') continue;
                    v[5][c] = 1;
                    for(int d = 0 ; d < colors[7].size() ; d++)
                    {
                        if(colors[7][d] == 'N') continue;
                        v[7][d] = 1;
                        short cnt1 = 0 , cnt2 = 0 , cnt3 = 0 , cnt4 = 0 ;
                        for(int i = 0 ; i < colors[1].size() ; i++)
                        {
                            if(colors[1][i] == 'Y' && !v[0][i]&& !v[2][i] && !v[5][i])
                                cnt1++;
                        }
                        for(int i = 0 ; i < colors[3].size() ; i++)
                        {
                            if(colors[3][i] == 'Y' && !v[0][i] && !v[2][i] && !v[7][i])
                                cnt2++;
                        }
                        for(int i = 0 ; i < colors[4].size() ; i++)
                        {
                            if(colors[4][i] == 'Y' && !v[0][i] && !v[5][i] && !v[7][i])
                                cnt3++;
                        }
                        for(int i = 0 ; i < colors[6].size() ; i++)
                        {
                            if(colors[6][i] == 'Y' && !v[2][i] && !v[5][i] && !v[7][i])
                                cnt4++;
                        }
                        ans+= (long long) (cnt1*cnt2*cnt3*cnt4) ;
                        v[7][d] = 0 ;
                    }
                    v[5][c] = 0 ;
                }
                v[2][b] = 0 ;
            }
            v[0][a] = 0 ;
        }
        return ans ;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	CubeColoring *obj;
	long long answer;
	obj = new CubeColoring();
	clock_t startTime = clock();
	answer = obj->theCount(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	long long p1;

	{
	// ----- test 0 -----
	string t0[] = {"Y","Y","Y","Y","Y","Y","Y","Y"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"YNNNNNNN","NYNNNNNN","NNYNNNNN","NNNYNNNN","NNNNYNNN","NNNNNYNN","NNNNNNYN","NNNNNNNY"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"YNNYN","YYYYY","NYYNY","YNYYN","YNNYY","YNNYY","NNNYY","NYYYY"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 250ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	string t0[] = {"YNNYN","YYYYY","NNNNN","YNYYN","YNNYY","YNNYY","NNNYY","NYYYY"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0ll;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	string t0[] = {"YNNYNYYYYYNN","NNNYNYYNYNNY","YYNNYYNNNYYN","YYYYYNNYYYNN","NNNYYYNNYNYN","YYYNYYYYNYNN","NNNNNNYYNYYN","NNYNYYNNYNYY"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 611480ll;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
