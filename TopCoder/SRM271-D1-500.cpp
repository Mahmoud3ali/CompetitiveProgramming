#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class GameEnding {
public:
	int N;
	vector<pair<int,int> > progress;
	int solve()
	{
		bool ret = 0;
		for(int i = 0 ; i < N ; i++)
		{
			for(int j = 0 ; j < N ; j++)
			{
				if(we_good(i,j))
				{
					progress.push_back({i,j});
					ret |= !solve();
					progress.pop_back();
					if(ret) return ret;
				}
			}
		}
		return ret;
	}
	bool we_good(int x , int y)
	{
		for(int i = 0 ; i < progress.size() ; i++)
		{
			int dx = abs(progress[i].first-x);
			int dy = abs(progress[i].second-y);
			if(dx == 0 || dy == 0) return 0;
			if(dx == 2 && dy == 1) return 0;
			if(dx == 1 && dy == 2) return 0;
		}
		return 1;
	}
	string result(int n, vector <string> moves)
	{
		N = n;
		for(int i = 0 ; i < moves.size() ; i++)
		{
			int x = moves[i][0]-'a';
			int y = moves[i][1]-'1';
			if( we_good(x,y) ) progress.push_back({x,y});
		}
		if(progress.size() != moves.size()) return "Invalid input";
		int ans = solve();
		if(ans && moves.size()%2 == 0) return "First player wins";
		else if(ans == 0 && moves.size()%2) return "First player wins";
		else return "Second player wins";
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <string> p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	GameEnding *obj;
	string answer;
	obj = new GameEnding();
	clock_t startTime = clock();
	answer = obj->result(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	vector <string> p1;
	string p2;

	{
	// ----- test 0 -----
	p0 = 3;
	string t1[] = {"b2"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "First player wins";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 4;
	string t1[] = {"a2","b3"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Second player wins";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 4;
	string t1[] = {"a3","b3"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Invalid input";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 4;
	string t1[] = {"a1","b2","c3","d4"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Second player wins";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 7;
	p1.clear() /*{}*/;
	p2 = "First player wins";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	p0 = 7;
	string t1[] = {"b5","g3","f2"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "Second player wins";
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
